// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BenchServiceClient is the client API for BenchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BenchServiceClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	Small(ctx context.Context, in *SmallRequest, opts ...grpc.CallOption) (*SmallResponse, error)
	Big(ctx context.Context, in *BigRequest, opts ...grpc.CallOption) (*BigResponse, error)
}

type benchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBenchServiceClient(cc grpc.ClientConnInterface) BenchServiceClient {
	return &benchServiceClient{cc}
}

func (c *benchServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/bench.BenchService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchServiceClient) Small(ctx context.Context, in *SmallRequest, opts ...grpc.CallOption) (*SmallResponse, error) {
	out := new(SmallResponse)
	err := c.cc.Invoke(ctx, "/bench.BenchService/Small", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchServiceClient) Big(ctx context.Context, in *BigRequest, opts ...grpc.CallOption) (*BigResponse, error) {
	out := new(BigResponse)
	err := c.cc.Invoke(ctx, "/bench.BenchService/Big", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BenchServiceServer is the server API for BenchService service.
// All implementations must embed UnimplementedBenchServiceServer
// for forward compatibility
type BenchServiceServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	Small(context.Context, *SmallRequest) (*SmallResponse, error)
	Big(context.Context, *BigRequest) (*BigResponse, error)
	mustEmbedUnimplementedBenchServiceServer()
}

// UnimplementedBenchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBenchServiceServer struct {
}

func (UnimplementedBenchServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedBenchServiceServer) Small(context.Context, *SmallRequest) (*SmallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Small not implemented")
}
func (UnimplementedBenchServiceServer) Big(context.Context, *BigRequest) (*BigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Big not implemented")
}
func (UnimplementedBenchServiceServer) mustEmbedUnimplementedBenchServiceServer() {}

// UnsafeBenchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BenchServiceServer will
// result in compilation errors.
type UnsafeBenchServiceServer interface {
	mustEmbedUnimplementedBenchServiceServer()
}

func RegisterBenchServiceServer(s grpc.ServiceRegistrar, srv BenchServiceServer) {
	s.RegisterService(&BenchService_ServiceDesc, srv)
}

func _BenchService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bench.BenchService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BenchService_Small_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchServiceServer).Small(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bench.BenchService/Small",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchServiceServer).Small(ctx, req.(*SmallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BenchService_Big_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchServiceServer).Big(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bench.BenchService/Big",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchServiceServer).Big(ctx, req.(*BigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BenchService_ServiceDesc is the grpc.ServiceDesc for BenchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BenchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bench.BenchService",
	HandlerType: (*BenchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _BenchService_Ping_Handler,
		},
		{
			MethodName: "Small",
			Handler:    _BenchService_Small_Handler,
		},
		{
			MethodName: "Big",
			Handler:    _BenchService_Big_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/bench.proto",
}
